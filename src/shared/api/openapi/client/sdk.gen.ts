// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-axios'
import type {
  GetUserAvatarByIdData,
  GetUserAvatarByIdResponses,
  GetUserAvatarByIdErrors,
  GetAllPostsData,
  GetAllPostsResponses,
  GetAllPostsErrors,
  GetPostImageByIdData,
  GetPostImageByIdResponses,
  GetPostImageByIdErrors,
  GetAllCommentsByPostData,
  GetAllCommentsByPostResponses,
  GetAllCommentsByPostErrors,
  PostCommentData,
  PostCommentResponses,
  PostCommentErrors,
  GetAllCategoriesData,
  GetAllCategoriesResponses,
  GetAllCategoriesErrors,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Gets the avatar of the user by id
 */
export const getUserAvatarById = <ThrowOnError extends boolean = false>(
  options: Options<GetUserAvatarByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserAvatarByIdResponses,
    GetUserAvatarByIdErrors,
    ThrowOnError
  >({
    responseType: 'blob',
    url: '/users/avatar/{id}',
    ...options,
  })
}

/**
 * Gets all posts
 */
export const getAllPosts = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPostsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllPostsResponses,
    GetAllPostsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/blog/posts',
    ...options,
  })
}

/**
 * Gets the image for the post by id
 */
export const getPostImageById = <ThrowOnError extends boolean = false>(
  options: Options<GetPostImageByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPostImageByIdResponses,
    GetPostImageByIdErrors,
    ThrowOnError
  >({
    responseType: 'blob',
    url: '/blog/posts/image/{id}',
    ...options,
  })
}

/**
 * Gets all comments for the post
 */
export const getAllCommentsByPost = <ThrowOnError extends boolean = false>(
  options: Options<GetAllCommentsByPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllCommentsByPostResponses,
    GetAllCommentsByPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/blog/comments',
    ...options,
  })
}

/**
 * Post a new comment for the post
 */
export const postComment = <ThrowOnError extends boolean = false>(
  options: Options<PostCommentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCommentResponses,
    PostCommentErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/blog/comments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Gets all categories
 */
export const getAllCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllCategoriesResponses,
    GetAllCategoriesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/blog/categories',
    ...options,
  })
}
